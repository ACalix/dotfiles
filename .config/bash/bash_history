ls
sh
wcsh
echo $SHELL
chsh -s /usr/local/bin/zsh
vim /etc/shells
sudo vim /etc/shells
s
chsh -s /usr/local/bin/zsh
exit
vim ~/.config/
exit
ls
env
echo $EDITOR
echo ${EDITOR,,}
echo ${ALACRITTY_LOG,,}
ls
cargo run
cd ../euler
./main
../euler-rs
ls
cd ../euler-rs
ls
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
cargo run
hello
hello
cargo run
cargo --offline run
exit
export CODECOV_TOKEN="48e99428-1bdc-46d3-afe9-0c7bb072dc26"
bash <(curl -s https://codecov.io/bash)
cat coverage.txt 
docker run -d -p 2222:22   -v /var/run/docker.sock:/var/run/docker.sock   -e FILTERS={\"name\":[\"^/my-container$\"]} -e AUTH_MECHANISM=noAuth   jeroenpeeters/docker-ssh
ssh localhost -p 2222
bazel build --bazelrc="ci/bazelrc" $(bazel query --bazelrc="ci/bazelrc" 'kind(go_binary, //...)')
bazel --bazelrc="ci/bazelrc" build $(bazel --bazelrc="ci/bazelrc" query 'kind(go_binary, //...)')
exit
vault write auth/kubernetes/config         token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"         kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443"         kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
vault write auth/kubernetes/config    token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"    kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
vault write auth/kubernetes/config         token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"         kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443"         kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
sed -e "s/\$\((\d)\)/$\1/"
sed -e "s/\$\((\d)\)/$\1/" query.sql 
sed -E "s/\$\((\d)\)/$\1/" query.sql 
sed -E "s/\$\((\d)\)/$\1/g" query.sql 
sed -E 's/$\(/$/' query.sql 
sed -E 's/$\(//' query.sql 
sed -E 's/$\(//' query.sql 
sed -E 's/$(//' query.sql 
sed 's/$\(//' query.sql 
sed -E 's/$\(//' query.sql 
sed -E 's/$/--/' query.sql 
sed -E 's/\$/--/' query.sql 
sed -E 's/\$\(/--/' query.sql 
sed -E 's/\$\(/$/' query.sql 
sed -E 's/\$\(\d+\)/$\1/' query.sql 
sed -E 's/\$\(\d+\)/$/1/' query.sql 
sed -E 's/\$\(\d+\)/$\\1/' query.sql 
sed -E 's/\$\(\d+/$/' query.sql 
sed -E 's/\$\(.*/$/' query.sql 
sed -E 's/\$\([0-9]+\)/$/' query.sql 
sed -E 's/\$\((\d+)\)/$/' query.sql 
sed -E 's/\$\((\d*)\)/$/' query.sql 
sed -E 's/\$\(([0-9]*)\)/$/' query.sql 
sed -E 's/\$\(([0-9]*)\)/$\1/' query.sql 
sed -E 's/\$\(([0-9]*)\)/$\1/' query.sql 
sed -E 's/\$\(([0-9]*)\)/$\1/g' query.sql 
sed -e 's/\$\(([0-9]*)\)/$\1/g' query.sql
sed -E 's/\$\(([0-9]*)\)/$\1/g' query.sql 
mkdir $HOME/Desktop/Screenshots
defaults write com.apple.screencapture location $HOME/Desktop/Screenshots
defaults write com.apple.screencapture show-thumbnail -bool FALSE
killall SystemUIServer
vault write ssh-client-signer/roles/my-role -<<"EOH"
{
  "allow_user_certificates": true,
  "allowed_users": "*",
  "allowed_extensions": "permit-pty,permit-port-forwarding",
  "default_extensions": [
    {
      "permit-pty": ""
    }
  ],
  "key_type": "ca",
  "default_user": "ubuntu",
  "ttl": "30m0s"
}
EOH

vault write ssh-client-signer/roles/operator -<<"EOH"
{
  "allow_user_certificates": true,
  "allowed_users": "*",
  "allowed_extensions": "permit-pty,permit-port-forwarding",
  "default_extensions": [
    {
      "permit-pty": ""
    }
  ],
  "key_type": "ca",
  "default_user": "ubuntu",
  "ttl": "30m0s"
}
EOH

rm ~/.config/bash/history 
ls
